{"meta":{"title":"Mirac1e的个人博客","subtitle":"记录学到的点点滴滴","description":"No pains，no gains","author":"Miracle","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-02-26T15:18:35.000Z","updated":"2020-02-26T16:30:00.387Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-02-26T15:19:56.000Z","updated":"2020-02-26T16:29:23.861Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java基础知识复习整理（二）","slug":"Java基础知识复习整理（二）","date":"2020-02-27T13:58:55.228Z","updated":"2020-02-27T14:08:49.935Z","comments":true,"path":"2020/02/27/Java基础知识复习整理（二）/","link":"","permalink":"http://yoursite.com/2020/02/27/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"","text":"对象与类面向对象程序设计(简称OOP)是当今主流的程序设计范型，它已经取代了20世纪70年代的“结构化”过程化程序设计开发技术。Java是完全面向对象的， 必须熟悉OOP才能够编写Java程序。 类类是构造对象的模板。由类构造对象的过程称为创建类的实例。对象中的数据称为实例域，操作数据的过程称为方法。对于特定的实例都有一组特定的实例域值，这些值的集合就是对象的当前状态。无论何时，只要像对象发送一个消息，他的状态就有可能发生改变。 类与类的关系依赖(Dependency)是一种”use-a”关系，大多数情况下依赖关系体现在某个类的方法使用另一个类的对象作为参数。 聚合(Aggregation)是一种“ has-a” 关系，是一种具体且易于理解的关系。例如，一个Order对象包含一些Item对象。聚合关系意味着类 A 的对象包含类 B 的对象。 继承(Inheritance)是一种”is-a”关系，子类从父类中继承了一些方法以及参数。 final实例域可以将实例域定义为final。构建对象时必须初始化这样的域，并且在后面的操作中不能对它进行修改。 12345class Student&#123; private final String name; . . .&#125; 静态域与静态方法静态域如果将域定义为static，那么这个域将被这个类所有的实例共享，不管有多少个实例存在，静态域只有一个，即使没有实例，它也存在。它属于类，不属于任何独立的对象。 静态方法静态方法不能操作对象，可以有类名直接调用。 方法参数将参数传递给方法有：按值调用，表示方法接受的是调用者提供的值。按引用调用，表示方法接受的是调用者提供的变量地址。Java对基础变量作为参数是按值调用，而对象作为参数传递的是引用拷贝。 参考：关于Java对象作为参数传递是传值还是传引用的问题 调用另外的构造器在一个构造器中，可以通过如下的this语句调用一个类的另外一个构造器。 12345public Student (int age)&#123; //call Student(String name,int age) this(\"xxxx\",age);&#125; 初始化块Java给数据域赋值可以通过构造器和声明，第三种方法就是初始化块。 12345678910class Student&#123; private int age; private String name; //initialization block &#123; age = 0; name = \"\"; &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Java基础知识复习整理（一）","slug":"Java基础知识复习整理（一）","date":"2020-02-27T12:30:22.371Z","updated":"2020-02-27T12:39:31.292Z","comments":true,"path":"2020/02/27/Java基础知识复习整理（一）/","link":"","permalink":"http://yoursite.com/2020/02/27/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"Java基础知识复习整理（一）1.Java数据类型在Java中，一共有8种基本数据类型，其中包括4种整型，2种浮点类型和1中用于表示Unicode编码的字符单元的字符类型char和1中用于表示真值的布尔(boolean)类型。 1.1 整型 类型 存储需求 取值范围 byte 1字节 -128~127 short 2字节 -32 768~32 767 int 4字节 -2 147 483 648~2 147 483 647 long 8字节 -9 223 372 036 854 775 808~9 223 372 036 854 775 807 整型用于表示没有小数部分的数值，允许为负数。与C++不同，Java整型的范围与运行Java代码的机器无关，这也是Java可以在各个平台方便移植的原因之一。 从 Java7 开始， 加上前缀 0b 或 0B 就可以写二进制数。例如，0b1001就是 9。 1.2 浮点类型 类型 存储需求 取值范围 float 4字节 大约 ± 3.402 82347E+38F (有效位数为6~7位） double 8字节 大约 ± 1.797 693 134 862 315 70E+308 (有效位数为 15 位） 浮点类型使用科学技术法表示一个数，可以表示非常大的数，但是牺牲了精度(这取决于有效数字的位数)。通常float类型的精度难以满足要求，一般使用double类型。 浮点溢出有3个特殊的浮点值分别是：正无穷大(Double.POSITIVE_INFINITY)，负无穷大(Double.NEGATIVE_INFINITY)和不是一个数字(NaN)。 浮点数值由于采用二进制系统表示，不适用与无法接受舍入的计算中。例如在Java中输入命令System.out.print(2.0-1.1)将会输出0.8999999999999999，而不是0.9。具体原因可以参考计算机组成原理相关的知识。 1.3 Char类型char类型用于表示单个字符，大小为2字节。有些 Unicode 字符可以用一个char值描述，另外一些Unicode字符则需要两个char值。char类型的字面量值要用单引号括起来。例如：’A’是编码值为 65 所对应的字符常量。它与”A”不同，”A”是包含一个字符A的字符串，char类型的值可以表示为十六进制值，其范围从\\u0000 到\\Uffff。例如：\\u03C0表示希腊字母π(一定要注意注释中的\\u)。 由于Unicode字符集已经超出了65 535个，16位的char无法满足需要。从Java SE 5.0开始使用了码点这一概念。码点(code point)是指与一个编码表中的某个字符对应的代码值。在Unicode标准中，码点采用十六进制书写，并加上前缀 U+, 例如U+0041就是拉丁字母A的码点。Unicode的码点可以分成 17 个代码级别(codeplane)。第一个代码级别称为基本的多语言级别(basic multilingual plane), 码点从 U+0000到U+FFFF, 其中包括经典的Unicode代码；其余的16个级另码点从U+10000到U+10FFFF, 其中包括一些辅助字符(supplementary character)。UTF-16 编码采用不同长度的编码表示所有Unicode码点。在基本的多语言级别中，每个字符用16位表示，通常被称为代码单元(code unit); 而辅助字符采用一对连续的代码单元进行编码。这样构成的编码值落人基本的多语言级别中空闲的2048字节内， 通常被称为替代区域(surrogate area) [U+D800 ~ U+DBFF用于第一个代码单元，U+DC00 ~ U+DFFF用 于第二个代码单元]。这样设计十分巧妙，我们可以从中迅速地知道一个代码单元是一个字符的编码，还是一个辅助字符的第一或第二部分。例如，⑪是八元数集的一个数学符号，码点为U+1D546, 编码为两个代码单元U+D835和U+DD46 1.4 布尔类型boolean(布尔)类型有两个值：false和true，用来判定逻辑条件。与C++不同，整型值和布尔值之间不能进行相互转换。 2.变量2.1 初始化声明变量之后必须使用赋值语句对变量进行初始化，Java不区分变量的声明与定义。 2.2 常量Java使用final关键字声明常量，常量名通常使用全大写。如果希望常量可以在一个类的多个方法中使用，可以使用static final进行声明。 2.3 数值类型之间的转换Java中经常需要把一个数值类型转换为另外一种类型，有些是合法的，而有些则会丢失一部分信息。如下图所示，实线表示合法转换，而虚线则表示存在数据的丢失。 ​ 当两个不同数值类型的数进行运算时，Java先要将两个操作数转换为同一种类型然后进行计算，转换时会准守如下规则： ​ •如果两个操作数中有一个是double类型， 另一个操作数就会转换为double类型。 ​ •否则，如果其中一个操作数是float类型，另一个操作数将会转换为float类型。 ​ •否则， 如果其中一个操作数是long类型， 另一个操作数将会转换为long类型。 ​ •否则， 两个操作数都将被转换为int类型。 在必要的时候可以使用强制类型转换，需要通过(cast)实现这个操作。例如： double x = 0.1; int nx = (int)x; 3.运算符3.1 自增与自减运算符有两种形式，前缀：n++，n– 后缀：++n，–n。两者的区别为：前缀形式会先完成加1，而后缀形式会使用变量原来的值。 3.2 关系和boolean运算符使用==检测相等性，使用！=检测不相等，还有&lt;,&gt;,&gt;=,&lt;=运算符。 Java沿用C++使用&amp;&amp;表示逻辑“与”运算，使用||表示逻辑“或”运算。如果第一个操作数能确定表达式的值，则后面的不用计算。可以使用&amp;和|使计算式计算每个表达式的值. 三元操作符condition ？expression1 ： expression2，如果condition为真，则结果为前者，否则为后者。例如x&lt;y ? x : y会返回x，y中较小者。 3.3 位运算符处理整型时可以对数值的各个位完成操作。在掩码技术和加密算法中可以应用。Java的位运算符有：&amp; (“and”)，| (“or”)，^ (“xor”)，~ (“not”)。 例如，如果n是一个整数变量，而且用二进制表示的n从右边数第4位为1，则 int fourthBitFromRight = (n &amp; 0b1000) / 0b1000; 会返回1，否则返回0。利用&amp;并结合使用适当的2的幂，可以把其他位掩掉， 而只保留其中的某一位。 另外，还有&gt;&gt;和&lt;&lt;运算符将位模式左移或右移，&gt;&gt;&gt;运算符会用0填充高位，这与&gt;&gt;不同，它会用符号位填充高位。不存在&lt;&lt;&lt;运算符。 4.字符串字符串从概念上讲就是Unicode字符序列。Java没有内置的字符串类型，而是定义了一个String类，每个双引号括起来的字符串都是String类的一个实例。 4.1 子串与拼接String类的substring方法可以截取字符串的子串，第一个参数是开始的位置，第二个参数是截取的长度。Java允许字符串之间使用+号进行连接。当将一个字符串与一个非字符串的值进行拼接时，后者被转换成字符串。常用的输出语句中的整型变量实则是被转换成了字符串。 4.2 不可变字符串String类不提供修改字符串的方法，改变字符串变量实际上是让它指向了另一个字符串。Java可以将字符串常量的实例放在一个公共的存储池中进行共享，如果复制一个字符串变量，原始字符串变量与复制的变量指向同一个实例。 4.3 检测字符串是否相等可以使用equals方法检测两个字符串是否相等。不要使用==检测两个字符串是否相等，它只能确定两个字符串是否放在同一个位置上，即是否是同一个实例。但是完全可以将多个相同内容的字符串的放在不同的位置上。 如果虚拟机始终将相同的字符串共享， 就可以使用==运算符检测是否相等。但实际上只有字符串常量是共享的，而+或substring等操作产生的结果并不是共享的。 4.4 空字符串与Null串空串指的是””，是一个实例对象，有自己的长度(0)和内容(空)。不过，String变量有个特殊的值叫做Null，表示目前该变量没有指向任何对象，使用==判断变量是否为Null。 4.5 码点与代码单元Java的字符串有char值序列组成。大多数char值使用一个代码单元，而有的使用了一对代码单元。String的length方法返回的是字符串的代码单元的数量，charAt(n)返回位置n的代码单元。而对于字符串”⑪”,调用length方法会返回2，而charAt(1)返回的是其第二个代码单元而不是空格。 4.6 StringBuilder类使用拼接字符串的方式产生字符串时每次都会构建新的String对象，浪费空间。而使用StringBuilder类则可以避免这个问题。StringBuilder类提供多种方法可以修改其中的保存的字符串，修改后最后调用toString方法将其变为String类型。 5.输入输出5.1 读取输入想要通过控制台进行输入，需要狗键一个Scanner对象，并与标准输入流System.in关联。代码为：Scanner in = new Scanner(System.in);可以调用Scanner类的各种方法实现输入，如nextLine方法输入一行，还有nextInt等。 5.2 文件输入与输出要想对文件进行读取就要用File对象构建Scanner对象，如需要读取项目根目录下的myfile.txt的内容就可以定义如下对象：Scanner in = new Scanner(Paths.get(“myflle.txt”), “UTF-8”); 然后便可以使用Scanner类的nextLine等方法对文件进行读取。 如果要写入文件，就需要构建PrintWriter对象：PrintWriter out = new PrintWriter(“myfile.txt”, “UTF-8”)，如果文件不存在，则创建该文件。可以像输入到System.out—样使用print、println以及printf方法。 6.数组数组是一种数据结构，用来存储同一类型的值。可以通过下标访问数组中的每一个值。 数组的声明方式为：int[] a = new int[n]; 其中n可以为常量也可以为变量。 创建一个数字数组时，所有元素都初始化为0。boolean类型数组初始化为false。对象数组初始化为null，表示该数组每有存放任何对象。 6.1 for each循环遍历数组Java 有一种功能很强的循环结构， 可以用来依次处理数组中的每个元素而不必为指定下标值而分心。 这种增强的 for 循环的语句格式为： for (variable : collection) statement 6.2 数组拷贝在Java中，允许将一个数组变量拷贝到另一个数组变量，两个变量将引用同一个数组。 如果希望将一个数组的所有值拷贝到一个新的数组中去，可以使用Array类的copyOf方法，该方法通常用来增加数组的大小 6.3 数组排序Array类的sort方法提供了一个优化的快速排序算法。","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-02-26T11:24:40.674Z","updated":"2020-02-26T11:24:40.674Z","comments":true,"path":"2020/02/26/hello-world/","link":"","permalink":"http://yoursite.com/2020/02/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}